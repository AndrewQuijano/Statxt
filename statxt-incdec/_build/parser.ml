type token =
  | LBRACE
  | RBRACE
  | SEMI
  | LPAREN
  | RPAREN
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | DECREMENT
  | INCREMENT
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STRING
  | CHAR
  | STRUCT
  | LSQUARE
  | RSQUARE
  | PIPE
  | DOT
  | CHARLIT of (char)
  | INTLIT of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | STRLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast

let fst (a,_,_) = a;;
let snd (_,b,_) = b;;
let trd (_,_,c) = c;;

# 58 "parser.ml"
let yytransl_const = [|
  257 (* LBRACE *);
  258 (* RBRACE *);
  259 (* SEMI *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* DECREMENT *);
  269 (* INCREMENT *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* AND *);
  278 (* OR *);
  279 (* RETURN *);
  280 (* IF *);
  281 (* ELSE *);
  282 (* FOR *);
  283 (* WHILE *);
  284 (* INT *);
  285 (* BOOL *);
  286 (* FLOAT *);
  287 (* VOID *);
  288 (* STRING *);
  289 (* CHAR *);
  290 (* STRUCT *);
  291 (* LSQUARE *);
  292 (* RSQUARE *);
  293 (* PIPE *);
  294 (* DOT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  295 (* CHARLIT *);
  296 (* INTLIT *);
  297 (* BLIT *);
  298 (* ID *);
  299 (* FLIT *);
  300 (* STRLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\007\000\007\000\
\009\000\009\000\005\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\006\000\006\000\010\000\010\000\003\000\008\000\
\008\000\008\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\014\000\014\000\015\000\016\000\016\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\017\000\017\000\018\000\018\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\008\000\000\000\001\000\
\002\000\004\000\006\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\004\000\000\000\002\000\003\000\000\000\
\002\000\002\000\002\000\003\000\003\000\005\000\007\000\009\000\
\005\000\000\000\001\000\001\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\004\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\003\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\071\000\000\000\012\000\013\000\014\000\015\000\
\016\000\017\000\000\000\001\000\003\000\004\000\005\000\000\000\
\019\000\000\000\000\000\000\000\021\000\000\000\023\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\018\000\009\000\000\000\000\000\011\000\000\000\024\000\
\000\000\000\000\010\000\024\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\040\000\041\000\
\000\000\042\000\043\000\026\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\000\000\046\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\066\000\028\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\064\000\000\000\047\000\000\000\000\000\033\000\
\000\000\000\000\000\000\031\000\000\000\000\000\032\000"

let yydgoto = "\002\000\
\003\000\004\000\060\000\014\000\015\000\033\000\029\000\042\000\
\030\000\025\000\017\000\061\000\062\000\068\000\000\000\073\000\
\102\000\103\000"

let yysindex = "\010\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\230\254\000\000\000\000\000\000\000\000\227\254\
\000\000\020\255\032\255\055\255\000\000\041\255\000\000\055\000\
\225\255\000\000\033\255\228\254\080\255\096\255\119\255\000\000\
\233\254\000\000\000\000\123\255\055\000\000\000\126\255\000\000\
\036\255\065\255\000\000\000\000\000\000\208\255\208\255\208\255\
\208\255\130\255\141\255\142\255\208\255\000\000\000\000\000\000\
\025\255\000\000\000\000\000\000\000\000\092\000\109\255\140\000\
\102\255\102\255\208\001\144\255\208\255\208\255\208\255\208\001\
\018\255\208\255\208\255\000\000\208\255\208\255\208\255\208\255\
\208\255\000\000\000\000\208\255\208\255\208\255\208\255\208\255\
\208\255\208\255\208\255\116\255\000\000\000\000\000\000\164\000\
\156\255\188\000\208\255\000\000\208\001\155\255\157\255\176\001\
\161\255\161\255\052\255\052\255\208\001\000\002\000\002\118\255\
\118\255\118\255\118\255\240\001\224\001\000\000\197\255\208\255\
\197\255\208\001\000\000\208\255\000\000\137\255\116\000\000\000\
\208\001\197\255\208\255\000\000\159\255\197\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\255\000\000\000\000\000\000\000\000\000\000\160\255\
\000\000\000\000\000\000\000\000\000\000\163\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\166\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\060\000\005\255\000\000\000\000\166\255\000\000\026\255\
\000\000\167\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\113\255\000\000\170\255\000\000\
\000\001\022\001\212\000\234\000\012\255\132\001\154\001\044\001\
\066\001\088\001\110\001\017\255\046\255\000\000\000\000\000\000\
\000\000\050\255\000\000\000\000\000\000\153\255\000\000\000\000\
\115\255\000\000\173\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\059\000\000\000\000\000\046\000\000\000\122\000\
\000\000\000\000\000\000\238\255\212\255\186\255\000\000\000\000\
\000\000\000\000"

let yytablesize = 806
let yytable = "\097\000\
\012\000\064\000\065\000\066\000\067\000\019\000\019\000\035\000\
\072\000\035\000\001\000\019\000\020\000\035\000\063\000\018\000\
\063\000\063\000\039\000\059\000\021\000\059\000\059\000\099\000\
\096\000\067\000\098\000\059\000\074\000\101\000\104\000\037\000\
\105\000\106\000\107\000\108\000\109\000\059\000\059\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\063\000\
\060\000\016\000\060\000\060\000\059\000\100\000\122\000\038\000\
\060\000\023\000\024\000\075\000\133\000\037\000\013\000\082\000\
\083\000\044\000\045\000\060\000\046\000\028\000\019\000\022\000\
\047\000\018\000\034\000\127\000\026\000\043\000\048\000\129\000\
\018\000\060\000\041\000\032\000\036\000\038\000\067\000\049\000\
\050\000\092\000\051\000\052\000\005\000\006\000\007\000\008\000\
\009\000\010\000\027\000\053\000\126\000\037\000\128\000\054\000\
\055\000\056\000\057\000\058\000\059\000\044\000\093\000\132\000\
\046\000\082\000\083\000\135\000\047\000\069\000\069\000\070\000\
\070\000\038\000\048\000\040\000\077\000\078\000\079\000\080\000\
\023\000\082\000\083\000\049\000\050\000\069\000\051\000\052\000\
\005\000\006\000\007\000\008\000\009\000\010\000\027\000\053\000\
\070\000\071\000\095\000\054\000\055\000\056\000\057\000\058\000\
\059\000\030\000\030\000\092\000\030\000\118\000\120\000\123\000\
\030\000\130\000\124\000\134\000\007\000\063\000\030\000\008\000\
\034\000\079\000\080\000\067\000\082\000\083\000\068\000\030\000\
\030\000\034\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\000\000\000\000\000\000\030\000\
\030\000\030\000\030\000\030\000\030\000\044\000\092\000\000\000\
\046\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\000\000\000\000\048\000\046\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\049\000\050\000\048\000\051\000\052\000\
\000\000\000\000\031\000\000\000\000\000\000\000\000\000\053\000\
\000\000\000\000\000\000\054\000\055\000\056\000\057\000\058\000\
\059\000\000\000\053\000\000\000\000\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\005\000\006\000\007\000\008\000\
\009\000\010\000\027\000\000\000\044\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\000\000\000\000\000\000\005\000\006\000\007\000\008\000\
\009\000\010\000\011\000\000\000\000\000\044\000\061\000\044\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\000\000\
\000\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\000\000\000\000\000\000\000\000\062\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\061\000\
\000\000\061\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\005\000\006\000\007\000\008\000\009\000\010\000\
\027\000\000\000\000\000\000\000\000\000\000\000\076\000\062\000\
\000\000\062\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\000\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\000\000\000\000\000\000\000\000\131\000\000\000\
\000\000\000\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\092\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
\094\000\000\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\092\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
\119\000\000\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\092\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
\121\000\000\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\092\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\000\000\000\000\000\000\000\000\051\000\000\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\000\000\
\000\000\092\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\000\000\052\000\000\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\000\000\000\000\051\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\000\000\049\000\000\000\049\000\049\000\049\000\049\000\
\000\000\000\000\049\000\000\000\000\000\052\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\050\000\000\000\050\000\050\000\050\000\050\000\000\000\000\000\
\050\000\000\000\000\000\049\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\000\000\055\000\000\000\
\055\000\055\000\000\000\000\000\000\000\000\000\055\000\000\000\
\000\000\050\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\000\000\000\000\056\000\000\000\056\000\056\000\
\000\000\000\000\000\000\000\000\056\000\000\000\000\000\055\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\057\000\000\000\057\000\057\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\056\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\000\000\000\000\
\058\000\000\000\058\000\058\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\057\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\053\000\000\000\
\053\000\053\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\058\000\053\000\053\000\000\000\000\000\000\000\000\000\
\053\000\053\000\000\000\000\000\054\000\000\000\054\000\054\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\053\000\
\054\000\054\000\000\000\000\000\000\000\000\000\054\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\054\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\125\000\000\000\092\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\077\000\078\000\
\079\000\080\000\000\000\082\000\083\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\092\000\077\000\078\000\
\079\000\080\000\000\000\082\000\083\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\000\000\092\000\077\000\078\000\
\079\000\080\000\000\000\082\000\083\000\000\000\000\000\000\000\
\086\000\087\000\088\000\089\000\000\000\092\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\092\000"

let yycheck = "\070\000\
\000\000\046\000\047\000\048\000\049\000\035\001\035\001\003\001\
\053\000\005\001\001\000\035\001\042\001\042\001\003\001\042\001\
\005\001\006\001\042\001\003\001\001\001\005\001\006\001\006\001\
\069\000\070\000\071\000\011\001\004\001\074\000\075\000\006\001\
\077\000\078\000\079\000\080\000\081\000\021\001\022\001\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\036\001\
\003\001\004\000\005\001\006\001\036\001\036\001\099\000\006\001\
\011\001\003\001\004\001\035\001\131\000\036\001\004\000\012\001\
\013\001\001\001\002\001\022\001\004\001\024\000\035\001\040\001\
\008\001\035\001\042\001\120\000\036\001\042\001\014\001\124\000\
\042\001\036\001\037\000\025\000\005\001\036\001\131\000\023\001\
\024\001\038\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\119\000\006\001\121\000\039\001\
\040\001\041\001\042\001\043\001\044\001\001\001\002\001\130\000\
\004\001\012\001\013\001\134\000\008\001\005\001\006\001\005\001\
\006\001\003\001\014\001\001\001\007\001\008\001\009\001\010\001\
\003\001\012\001\013\001\023\001\024\001\004\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\004\001\004\001\003\001\039\001\040\001\041\001\042\001\043\001\
\044\001\001\001\002\001\038\001\004\001\042\001\003\001\005\001\
\008\001\025\001\006\001\005\001\005\001\044\000\014\001\005\001\
\003\001\009\001\010\001\005\001\012\001\013\001\005\001\023\001\
\024\001\005\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\001\001\038\001\255\255\
\004\001\255\255\255\255\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\014\001\004\001\255\255\255\255\255\255\008\001\
\255\255\255\255\255\255\023\001\024\001\014\001\026\001\027\001\
\255\255\255\255\002\001\255\255\255\255\255\255\255\255\035\001\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\255\255\035\001\255\255\255\255\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\003\001\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\036\001\003\001\038\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\036\001\
\255\255\038\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\255\255\255\255\255\255\255\255\003\001\036\001\
\255\255\038\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\003\001\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\038\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\038\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\038\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\038\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\038\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\003\001\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\036\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\003\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\011\001\255\255\255\255\036\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\003\001\255\255\005\001\006\001\007\001\008\001\255\255\255\255\
\011\001\255\255\255\255\036\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\011\001\255\255\
\255\255\036\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\003\001\255\255\005\001\006\001\
\255\255\255\255\255\255\255\255\011\001\255\255\255\255\036\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\003\001\255\255\005\001\006\001\255\255\255\255\
\255\255\255\255\011\001\255\255\255\255\036\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\011\001\255\255\255\255\036\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\011\001\255\255\
\255\255\036\001\015\001\016\001\255\255\255\255\255\255\255\255\
\021\001\022\001\255\255\255\255\003\001\255\255\005\001\006\001\
\255\255\255\255\255\255\255\255\011\001\255\255\255\255\036\001\
\015\001\016\001\255\255\255\255\255\255\255\255\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\036\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\255\255\038\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\007\001\008\001\
\009\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\038\001\007\001\008\001\
\009\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\038\001\007\001\008\001\
\009\001\010\001\255\255\012\001\013\001\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\255\255\038\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001"

let yynames_const = "\
  LBRACE\000\
  RBRACE\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  DECREMENT\000\
  INCREMENT\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STRING\000\
  CHAR\000\
  STRUCT\000\
  LSQUARE\000\
  RSQUARE\000\
  PIPE\000\
  DOT\000\
  EOF\000\
  "

let yynames_block = "\
  CHARLIT\000\
  INTLIT\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  STRLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 43 "parser.mly"
            ( _1 )
# 464 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                 ( ([], [], []) )
# 470 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 47 "parser.mly"
                 ( ((_2 :: fst _1), snd _1, trd _1) )
# 478 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 48 "parser.mly"
                 ( (fst _1, (_2 :: snd _1), trd _1) )
# 486 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 49 "parser.mly"
                 ( (fst _1, snd _1, (_2 :: trd _1)) )
# 494 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'special_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 53 "parser.mly"
     ( { typ = _1;
     fname   = _2;
     formals = _4;
     locals  = List.rev (fst _7);
     body    = List.rev (snd _7) } )
# 508 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                  ( [] )
# 514 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 61 "parser.mly"
                  ( List.rev _1 )
# 521 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'special_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                                      ( [(_1, _2)]     )
# 529 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'special_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "parser.mly"
                                      ( (_3, _4) :: _1 )
# 538 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    Obj.repr(
# 69 "parser.mly"
    ( { sname = _2;
  members = _4 } )
# 547 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
           ( Int    )
# 553 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
           ( Bool   )
# 559 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
           ( Float  )
# 565 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
           ( Void   )
# 571 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
           ( String )
# 577 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
           ( Char   )
# 583 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
              ( Struct (_2) )
# 590 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 83 "parser.mly"
          ( _1 )
# 597 "parser.ml"
               : 'special_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'special_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 84 "parser.mly"
                                        ( Array(_1, _3) )
# 605 "parser.ml"
               : 'special_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                     ( [] )
# 611 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 88 "parser.mly"
                     ( _2 :: _1 )
# 619 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'special_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 91 "parser.mly"
                         ( (_1, _2) )
# 627 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                    ( [], [], [] )
# 633 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
                    ( fst _1, (_2 :: (snd _1)), [] )
# 641 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 96 "parser.mly"
                    ( (_2 :: (fst _1)), snd _1, [] )
# 649 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                            ( Expr _1               )
# 656 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 100 "parser.mly"
                                            ( Return _2             )
# 663 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 101 "parser.mly"
                                            ( Block(List.rev (fst _2), List.rev (snd _2)) )
# 670 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 102 "parser.mly"
                                            ( If(_3, _5, Block([], [])) )
# 678 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 103 "parser.mly"
                                            ( If(_3, _5, _7)        )
# 687 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 105 "parser.mly"
                                            ( For(_3, _5, _7, _9)   )
# 697 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 106 "parser.mly"
                                            ( While(_3, _5)         )
# 705 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                  ( Noexpr )
# 711 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                  ( _1 )
# 718 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                  ( ID(_1) )
# 725 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
         ( _1 :: [] )
# 732 "parser.ml"
               : 'array_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'array_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                          ( _3 :: _1 )
# 740 "parser.ml"
               : 'array_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 120 "parser.mly"
                     ( Charlit (_1)           )
# 747 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 121 "parser.mly"
                     ( Intlit(_1)             )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 122 "parser.mly"
                     ( BoolLit(_1)            )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 123 "parser.mly"
                     ( Fliteral(_1)           )
# 768 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 124 "parser.mly"
                     ( Strlit(_1)             )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parser.mly"
                     ( Id(_1)                 )
# 782 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                       ( IncDec(_1, Inc)        )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                       ( IncDec(_1, Dec)        )
# 796 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                            ( Arraccess(_1, _3) )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'array_list) in
    Obj.repr(
# 129 "parser.mly"
                               ( Arraylit(List.rev _2, List.length _2) )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 827 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 835 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 867 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 875 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 891 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 899 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 907 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                         ( Unop(Neg, _2)      )
# 914 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                     ( Unop(Not, _2)          )
# 921 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                       ( Assign(_1, _3)         )
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 145 "parser.mly"
                              ( Call(_1, _3)  )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parser.mly"
                   ( Sretrieve (_1, _3)     )
# 945 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                       ( _2                   )
# 952 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
                  ( [] )
# 958 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 152 "parser.mly"
               ( List.rev _1 )
# 965 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                         ( [_1]     )
# 972 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                         ( _3 :: _1 )
# 980 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
