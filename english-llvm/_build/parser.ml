type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | DECREMENT
  | INCREMENT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | DOT
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | FLOAT
  | BOOL
  | VOID
  | LENGTH
  | CHAR
  | STRING
  | OF
  | STRUCT
  | LINDEX
  | RINDEX
  | NUM_LIT of (int)
  | FLOAT_LIT of (float)
  | STRING_LIT of (string)
  | CHAR_LITERAL of (char)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast

let fst (a,_,_) = a;;
let snd (_,b,_) = b;;
let trd (_,_,c) = c;;

# 62 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LSQUARE *);
  263 (* RSQUARE *);
  264 (* COMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* DECREMENT *);
  272 (* INCREMENT *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LT *);
  276 (* LEQ *);
  277 (* GT *);
  278 (* GEQ *);
  279 (* TRUE *);
  280 (* FALSE *);
  281 (* AND *);
  282 (* OR *);
  283 (* DOT *);
  284 (* RETURN *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* INT *);
  290 (* FLOAT *);
  291 (* BOOL *);
  292 (* VOID *);
  293 (* LENGTH *);
  294 (* CHAR *);
  295 (* STRING *);
  296 (* OF *);
  297 (* STRUCT *);
  298 (* LINDEX *);
  299 (* RINDEX *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  300 (* NUM_LIT *);
  301 (* FLOAT_LIT *);
  302 (* STRING_LIT *);
  303 (* CHAR_LITERAL *);
  304 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\007\000\007\000\
\010\000\010\000\011\000\011\000\011\000\011\000\012\000\006\000\
\006\000\006\000\006\000\006\000\013\000\013\000\014\000\008\000\
\008\000\003\000\003\000\005\000\009\000\009\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\017\000\017\000\
\018\000\019\000\019\000\020\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\021\000\021\000\022\000\022\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\009\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\002\000\001\000\
\001\000\001\000\001\000\002\000\002\000\003\000\003\000\000\000\
\002\000\003\000\005\000\006\000\000\000\002\000\002\000\002\000\
\003\000\003\000\005\000\007\000\009\000\005\000\000\000\001\000\
\001\000\001\000\003\000\003\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\001\000\001\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\003\000\004\000\
\006\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\079\000\000\000\011\000\013\000\018\000\019\000\
\014\000\012\000\000\000\001\000\003\000\004\000\005\000\000\000\
\000\000\017\000\000\000\000\000\000\000\015\000\024\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\052\000\045\000\046\000\
\047\000\048\000\000\000\000\000\000\000\049\000\022\000\000\000\
\025\000\000\000\020\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\055\000\054\000\
\028\000\000\000\024\000\000\000\074\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\000\000\010\000\043\000\072\000\000\000\000\000\
\023\000\000\000\000\000\000\000\029\000\006\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\031\000\034\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\000\000\036\000\000\000\000\000\037\000"

let yydgoto = "\002\000\
\003\000\004\000\049\000\014\000\015\000\050\000\031\000\028\000\
\114\000\032\000\017\000\018\000\022\000\078\000\123\000\124\000\
\137\000\045\000\057\000\046\000\089\000\090\000"

let yysindex = "\024\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\239\254\000\000\000\000\000\000\000\000\241\254\
\044\255\000\000\059\255\069\255\049\255\000\000\000\000\000\000\
\146\002\227\255\044\255\249\001\011\255\026\255\076\255\064\255\
\227\255\227\255\227\255\227\255\000\000\000\000\000\000\000\000\
\000\000\000\000\055\255\093\001\086\255\000\000\000\000\080\255\
\000\000\035\255\000\000\000\000\085\255\146\002\200\001\056\002\
\099\255\070\255\070\255\227\255\227\255\000\000\227\255\227\255\
\227\255\227\255\227\255\227\255\227\255\227\255\227\255\227\255\
\227\255\227\255\227\255\071\255\227\255\000\000\000\000\000\000\
\000\000\017\255\000\000\074\255\000\000\227\255\000\000\094\002\
\115\255\121\255\030\002\136\255\136\255\240\254\240\254\094\002\
\151\002\151\002\250\254\250\254\250\254\250\254\132\002\113\002\
\000\000\075\002\146\002\000\000\000\000\000\000\227\255\110\255\
\000\000\063\255\094\002\227\255\000\000\000\000\052\255\128\255\
\129\255\131\255\120\001\000\000\094\002\111\255\000\000\147\001\
\227\255\227\255\227\255\000\000\000\000\000\000\226\001\094\002\
\137\255\252\001\180\255\227\255\180\255\107\255\174\001\000\000\
\180\255\227\255\000\000\138\255\180\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\096\255\000\000\241\254\000\000\000\000\000\000\000\000\000\000\
\146\255\000\000\104\255\000\000\000\000\000\000\000\000\157\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\154\255\
\000\000\235\255\067\000\159\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\255\
\000\000\161\255\000\000\148\000\175\000\094\000\121\000\012\255\
\054\001\074\001\202\000\229\000\000\001\027\001\020\000\082\001\
\000\000\000\000\122\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\255\000\000\000\000\000\000\
\000\000\164\255\000\000\000\000\000\000\000\000\000\000\013\255\
\000\000\000\000\000\000\000\000\000\000\169\255\000\000\000\000\
\000\000\173\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\168\000\000\000\000\000\254\255\000\000\097\000\
\060\000\000\000\000\000\000\000\154\000\000\000\230\255\195\255\
\039\000\000\000\101\000\000\000\000\000\000\000"

let yytablesize = 961
let yytable = "\044\000\
\012\000\016\000\063\000\064\000\065\000\066\000\055\000\056\000\
\058\000\059\000\076\000\077\000\070\000\040\000\070\000\040\000\
\077\000\024\000\070\000\070\000\076\000\073\000\030\000\073\000\
\001\000\077\000\078\000\073\000\073\000\026\000\019\000\078\000\
\020\000\088\000\091\000\077\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\021\000\106\000\084\000\127\000\033\000\070\000\027\000\
\060\000\034\000\051\000\056\000\061\000\035\000\023\000\073\000\
\033\000\036\000\117\000\118\000\034\000\024\000\025\000\054\000\
\035\000\052\000\037\000\038\000\036\000\142\000\053\000\144\000\
\081\000\026\000\082\000\147\000\115\000\037\000\038\000\150\000\
\083\000\125\000\119\000\120\000\128\000\121\000\122\000\039\000\
\040\000\041\000\042\000\043\000\079\000\080\000\135\000\136\000\
\138\000\087\000\039\000\040\000\041\000\042\000\043\000\077\000\
\033\000\143\000\117\000\133\000\034\000\110\000\105\000\136\000\
\035\000\108\000\116\000\029\000\036\000\029\000\029\000\029\000\
\111\000\129\000\130\000\029\000\131\000\037\000\038\000\029\000\
\145\000\140\000\119\000\120\000\149\000\121\000\122\000\016\000\
\029\000\029\000\065\000\066\000\007\000\029\000\029\000\021\000\
\029\000\029\000\039\000\040\000\041\000\042\000\043\000\008\000\
\042\000\075\000\076\000\076\000\039\000\029\000\029\000\029\000\
\029\000\029\000\035\000\013\000\035\000\035\000\035\000\039\000\
\126\000\077\000\035\000\107\000\047\000\033\000\035\000\117\000\
\148\000\034\000\109\000\000\000\000\000\035\000\000\000\035\000\
\035\000\036\000\000\000\000\000\035\000\035\000\000\000\035\000\
\035\000\000\000\037\000\038\000\000\000\000\000\000\000\119\000\
\120\000\000\000\121\000\122\000\035\000\035\000\035\000\035\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\040\000\041\000\042\000\043\000\033\000\000\000\000\000\000\000\
\034\000\000\000\000\000\068\000\035\000\068\000\000\000\000\000\
\036\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\000\000\037\000\038\000\068\000\068\000\068\000\068\000\068\000\
\068\000\000\000\000\000\068\000\068\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\040\000\
\041\000\042\000\043\000\000\000\066\000\068\000\066\000\000\000\
\000\000\000\000\066\000\066\000\000\000\000\000\000\000\000\000\
\066\000\005\000\006\000\007\000\008\000\000\000\009\000\010\000\
\053\000\011\000\053\000\000\000\066\000\066\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\000\000\041\000\041\000\
\053\000\053\000\053\000\053\000\053\000\053\000\066\000\000\000\
\053\000\053\000\053\000\069\000\000\000\069\000\000\000\000\000\
\000\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\000\000\053\000\053\000\069\000\069\000\069\000\069\000\069\000\
\069\000\000\000\000\000\069\000\069\000\069\000\058\000\000\000\
\058\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\000\000\000\000\069\000\058\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\058\000\058\000\
\000\000\059\000\000\000\059\000\000\000\000\000\000\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\000\000\000\000\
\058\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\059\000\059\000\000\000\056\000\000\000\056\000\000\000\
\000\000\000\000\056\000\056\000\056\000\056\000\000\000\000\000\
\056\000\000\000\000\000\059\000\056\000\056\000\056\000\056\000\
\056\000\056\000\000\000\000\000\056\000\056\000\000\000\057\000\
\000\000\057\000\000\000\000\000\000\000\057\000\057\000\057\000\
\057\000\000\000\000\000\057\000\000\000\000\000\056\000\057\000\
\057\000\057\000\057\000\057\000\057\000\000\000\000\000\057\000\
\057\000\000\000\062\000\000\000\062\000\000\000\000\000\000\000\
\062\000\062\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\057\000\062\000\062\000\062\000\062\000\062\000\062\000\
\000\000\000\000\062\000\062\000\000\000\063\000\000\000\063\000\
\000\000\000\000\000\000\063\000\063\000\000\000\000\000\000\000\
\000\000\063\000\000\000\000\000\062\000\063\000\063\000\063\000\
\063\000\063\000\063\000\000\000\000\000\063\000\063\000\000\000\
\064\000\000\000\064\000\000\000\000\000\000\000\064\000\064\000\
\000\000\000\000\000\000\000\000\064\000\000\000\000\000\063\000\
\064\000\064\000\064\000\064\000\064\000\064\000\000\000\000\000\
\064\000\064\000\000\000\065\000\000\000\065\000\000\000\000\000\
\000\000\065\000\065\000\000\000\000\000\000\000\000\000\065\000\
\000\000\000\000\064\000\065\000\065\000\065\000\065\000\065\000\
\065\000\000\000\000\000\065\000\065\000\000\000\060\000\000\000\
\060\000\000\000\000\000\000\000\060\000\060\000\000\000\000\000\
\000\000\000\000\060\000\000\000\000\000\065\000\060\000\060\000\
\000\000\000\000\061\000\000\000\061\000\000\000\060\000\060\000\
\061\000\061\000\067\000\000\000\067\000\000\000\061\000\000\000\
\067\000\067\000\061\000\061\000\000\000\062\000\067\000\000\000\
\060\000\000\000\061\000\061\000\000\000\063\000\064\000\065\000\
\066\000\067\000\000\000\067\000\000\000\068\000\069\000\070\000\
\071\000\072\000\073\000\000\000\061\000\074\000\075\000\076\000\
\132\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\
\063\000\064\000\065\000\066\000\067\000\000\000\077\000\000\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\074\000\075\000\076\000\134\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\000\000\077\000\000\000\068\000\069\000\070\000\071\000\072\000\
\073\000\000\000\000\000\074\000\075\000\076\000\146\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\063\000\064\000\
\065\000\066\000\067\000\000\000\077\000\000\000\068\000\069\000\
\070\000\071\000\072\000\073\000\000\000\000\000\074\000\075\000\
\076\000\000\000\085\000\000\000\000\000\000\000\000\000\000\000\
\063\000\064\000\065\000\066\000\067\000\000\000\000\000\077\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\074\000\075\000\076\000\000\000\139\000\000\000\000\000\000\000\
\000\000\000\000\063\000\064\000\065\000\066\000\067\000\000\000\
\000\000\077\000\068\000\069\000\070\000\071\000\072\000\073\000\
\000\000\000\000\074\000\075\000\076\000\048\000\141\000\000\000\
\000\000\000\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\000\000\000\000\077\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\074\000\075\000\076\000\000\000\
\000\000\005\000\006\000\007\000\008\000\000\000\009\000\010\000\
\000\000\029\000\000\000\000\000\112\000\077\000\063\000\064\000\
\065\000\066\000\067\000\000\000\000\000\000\000\068\000\069\000\
\070\000\071\000\072\000\073\000\000\000\000\000\074\000\075\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\086\000\
\063\000\064\000\065\000\066\000\067\000\000\000\000\000\077\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\074\000\075\000\076\000\063\000\064\000\065\000\066\000\067\000\
\000\000\000\000\000\000\068\000\069\000\070\000\071\000\072\000\
\073\000\077\000\000\000\074\000\075\000\076\000\063\000\064\000\
\065\000\066\000\067\000\000\000\000\000\000\000\068\000\069\000\
\070\000\071\000\072\000\073\000\077\000\113\000\074\000\075\000\
\076\000\063\000\064\000\065\000\066\000\000\000\000\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\077\000\
\000\000\074\000\000\000\076\000\063\000\064\000\065\000\066\000\
\000\000\000\000\000\000\000\000\068\000\069\000\070\000\071\000\
\072\000\073\000\077\000\000\000\000\000\000\000\076\000\063\000\
\064\000\065\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\071\000\072\000\073\000\077\000\000\000\000\000\
\000\000\076\000\005\000\006\000\007\000\008\000\000\000\009\000\
\010\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\077\000"

let yycheck = "\026\000\
\000\000\004\000\009\001\010\001\011\001\012\001\033\000\034\000\
\035\000\036\000\027\001\003\001\001\001\001\001\003\001\003\001\
\008\001\001\001\007\001\008\001\027\001\001\001\025\000\003\001\
\001\000\042\001\003\001\007\001\008\001\013\001\048\001\008\001\
\048\001\060\000\061\000\042\001\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\006\001\077\000\054\000\001\001\002\001\043\001\007\001\
\002\001\006\001\048\001\086\000\006\001\010\001\004\001\043\001\
\002\001\014\001\004\001\005\001\006\001\001\001\002\001\008\001\
\010\001\048\001\023\001\024\001\014\001\139\000\003\001\141\000\
\001\001\013\001\048\001\145\000\111\000\023\001\024\001\149\000\
\004\001\116\000\028\001\029\001\119\000\031\001\032\001\044\001\
\045\001\046\001\047\001\048\001\015\001\016\001\129\000\130\000\
\131\000\007\001\044\001\045\001\046\001\047\001\048\001\042\001\
\002\001\140\000\004\001\005\001\006\001\003\001\048\001\146\000\
\010\001\048\001\013\001\002\001\014\001\004\001\005\001\006\001\
\008\001\002\001\002\001\010\001\002\001\023\001\024\001\014\001\
\030\001\001\001\028\001\029\001\003\001\031\001\032\001\048\001\
\023\001\024\001\011\001\012\001\003\001\028\001\029\001\048\001\
\031\001\032\001\044\001\045\001\046\001\047\001\048\001\003\001\
\007\001\003\001\027\001\003\001\001\001\044\001\045\001\046\001\
\047\001\048\001\002\001\004\000\004\001\005\001\006\001\003\001\
\117\000\042\001\010\001\083\000\027\000\002\001\014\001\004\001\
\146\000\006\001\086\000\255\255\255\255\010\001\255\255\023\001\
\024\001\014\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\255\255\023\001\024\001\255\255\255\255\255\255\028\001\
\029\001\255\255\031\001\032\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\044\001\
\045\001\046\001\047\001\048\001\002\001\255\255\255\255\255\255\
\006\001\255\255\255\255\001\001\010\001\003\001\255\255\255\255\
\014\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\023\001\024\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\044\001\045\001\
\046\001\047\001\048\001\255\255\001\001\043\001\003\001\255\255\
\255\255\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\001\001\041\001\003\001\255\255\025\001\026\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\043\001\255\255\
\025\001\026\001\027\001\001\001\255\255\003\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\042\001\043\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\001\001\255\255\
\003\001\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\043\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\255\255\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\043\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\255\255\001\001\255\255\003\001\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\255\255\255\255\043\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\255\255\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\255\255\255\255\043\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\255\255\001\001\255\255\003\001\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\013\001\255\255\
\255\255\043\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\255\255\001\001\255\255\003\001\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\013\001\255\255\255\255\043\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\025\001\026\001\255\255\
\001\001\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\013\001\255\255\255\255\043\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\255\255\001\001\255\255\003\001\255\255\255\255\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\013\001\
\255\255\255\255\043\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\255\255\001\001\255\255\
\003\001\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\255\255\255\255\043\001\017\001\018\001\
\255\255\255\255\001\001\255\255\003\001\255\255\025\001\026\001\
\007\001\008\001\001\001\255\255\003\001\255\255\013\001\255\255\
\007\001\008\001\017\001\018\001\255\255\001\001\013\001\255\255\
\043\001\255\255\025\001\026\001\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\026\001\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\043\001\025\001\026\001\027\001\
\001\001\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\255\255\042\001\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\027\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\255\255\042\001\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\042\001\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\027\001\255\255\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\042\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\027\001\255\255\003\001\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\042\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\027\001\005\001\003\001\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\042\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\027\001\255\255\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\255\255\041\001\255\255\255\255\007\001\042\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\042\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\027\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\042\001\255\255\025\001\026\001\027\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\042\001\043\001\025\001\026\001\
\027\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\042\001\
\255\255\025\001\255\255\027\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\042\001\255\255\255\255\255\255\027\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\042\001\255\255\255\255\
\255\255\027\001\033\001\034\001\035\001\036\001\255\255\038\001\
\039\001\255\255\041\001\255\255\255\255\255\255\255\255\255\255\
\042\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  DECREMENT\000\
  INCREMENT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  DOT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VOID\000\
  LENGTH\000\
  CHAR\000\
  STRING\000\
  OF\000\
  STRUCT\000\
  LINDEX\000\
  RINDEX\000\
  EOF\000\
  "

let yynames_block = "\
  NUM_LIT\000\
  FLOAT_LIT\000\
  STRING_LIT\000\
  CHAR_LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 45 "parser.mly"
            ( _1 )
# 524 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                 ( [], [], [] )
# 530 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 49 "parser.mly"
               ( (_2 :: fst _1), snd _1, trd _1 )
# 538 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 50 "parser.mly"
               ( fst _1, (_2 :: snd _1), trd _1 )
# 546 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 51 "parser.mly"
               ( fst _1, snd _1, (_2 :: trd _1) )
# 554 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 569 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                  ( [] )
# 575 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 63 "parser.mly"
                  ( List.rev _1 )
# 582 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
                             ( [(_1,_2)] )
# 590 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
                             ( (_3,_4) :: _1 )
# 599 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
      ( Int )
# 605 "parser.ml"
               : 'dtyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
         (String)
# 611 "parser.ml"
               : 'dtyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
        (Float)
# 617 "parser.ml"
               : 'dtyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
       (Char)
# 623 "parser.ml"
               : 'dtyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dtyp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dim_list) in
    Obj.repr(
# 76 "parser.mly"
                ( Array(_1, _2) )
# 631 "parser.ml"
               : 'atyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dtyp) in
    Obj.repr(
# 79 "parser.mly"
         ( Simple(_1))
# 638 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atyp) in
    Obj.repr(
# 80 "parser.mly"
         ( _1 )
# 645 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
         ( Bool )
# 651 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
         ( Void)
# 657 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
              ( Struct (_2) )
# 664 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                  ( 1 )
# 670 "parser.ml"
               : 'dim_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dim_list) in
    Obj.repr(
# 87 "parser.mly"
                           ( 1 + _3 )
# 677 "parser.ml"
               : 'dim_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                     ( _2)
# 684 "parser.ml"
               : 'index))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                     ( [] )
# 690 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 96 "parser.mly"
                     ( _2 :: _1 )
# 698 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 99 "parser.mly"
                            ( VarDecl(_1, _2, Noexpr) )
# 706 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                            ( VarDecl(_1, _2, _4) )
# 715 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    Obj.repr(
# 105 "parser.mly"
      ( 
        { sname = _2;
          sformals = _4;
      } 
    )
# 727 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                   ( [] )
# 733 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 113 "parser.mly"
                   ( _2 :: _1 )
# 741 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
              ( Expr _1 )
# 748 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                ( Return Noexpr )
# 754 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Return _2 )
# 761 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 119 "parser.mly"
                            ( Block(List.rev _2) )
# 768 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 120 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 776 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 121 "parser.mly"
                                            ( If(_3, _5, _7) )
# 785 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 123 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 795 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 124 "parser.mly"
                                  ( While(_3, _5) )
# 803 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
                  ( Noexpr )
# 809 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                  ( _1 )
# 816 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 132 "parser.mly"
                   ( Id(_1) )
# 823 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                        ( [ _1 ] )
# 830 "parser.ml"
               : 'val_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val_list) in
    Obj.repr(
# 136 "parser.mly"
                        ( [ _1 ] @ _3 )
# 838 "parser.ml"
               : 'val_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'val_list) in
    Obj.repr(
# 139 "parser.mly"
                             ( _2 )
# 845 "parser.ml"
               : 'simple_arr_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 143 "parser.mly"
                     ( NumLit(_1) )
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 144 "parser.mly"
                     ( FloatLit(_1) )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 145 "parser.mly"
                     ( StringLit(_1) )
# 866 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 146 "parser.mly"
                     ( CharLit(_1))
# 873 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_arr_literal) in
    Obj.repr(
# 147 "parser.mly"
                       ( ArrayLit(_1))
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'index) in
    Obj.repr(
# 148 "parser.mly"
                     ( Index(_1, [_2]) )
# 888 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
                     ( BoolLit(true) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "parser.mly"
                     ( BoolLit(false) )
# 900 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 151 "parser.mly"
                    ( Id(_1) )
# 907 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id) in
    Obj.repr(
# 152 "parser.mly"
                   ( Pop(_1, Inc) )
# 914 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id) in
    Obj.repr(
# 153 "parser.mly"
                   ( Pop(_1, Dec) )
# 921 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                     ( Binop (_1, Add,   _3) )
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                     ( Binop (_1, Sub,   _3) )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                     ( Binop (_1, Mult,  _3) )
# 945 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                     ( Binop (_1, Div,   _3) )
# 953 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                     ( Binop (_1, Equal, _3) )
# 961 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                     ( Binop (_1, Neq,   _3) )
# 969 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                     ( Binop (_1, Less,  _3) )
# 977 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                     ( Binop (_1, Leq,   _3) )
# 985 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                     ( Binop (_1, Greater, _3) )
# 993 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                     ( Binop (_1, Geq,   _3) )
# 1001 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                     ( Binop (_1, And,   _3) )
# 1009 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                     ( Binop (_1, Or,    _3) )
# 1017 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                         ( Unop(Neg, _2) )
# 1024 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                     ( Unop(Not, _2) )
# 1031 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                       ( Assign(_1, _3) )
# 1039 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "parser.mly"
                  ( Dot(_1,        _3) )
# 1047 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 170 "parser.mly"
                                 ( Call(_1, _3) )
# 1055 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                                        ( ArrayAssign(_1, [_3], _6) )
# 1064 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                       ( _2 )
# 1071 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "parser.mly"
                  ( [] )
# 1077 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 177 "parser.mly"
                  ( List.rev _1 )
# 1084 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                            ( [_1] )
# 1091 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                            ( _3 :: _1 )
# 1099 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
